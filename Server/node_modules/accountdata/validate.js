exports.idLength = 16;

var objectIdList = {'ids': ['data']}

// Puzzle Sync Objects
var puzzleAttributes = ['Name', 'Hidden', 'IconColor', 'ImageHash', 'InspectionTime', 'Scramble',
                        'ScrambleLen', 'ShowScramble', 'ShowStats', 'Type'];
var attrFields = puzzleAttributes.map(function(x) { return {x: 'data'}; });
var objectPuzzle = {'id': 'id', 'attributes': attrFields};
var objectConflict = {'remotePuzzle': objectPuzzle, 'localId': 'id'};
var objectRename = {'id': 'id', 'name': 'string'};

// Session Sync Objects
var objectSolve = {'scramble': 'string', 'date': 'number', 'status': 'int',
                   'time': 'number', 'inspectionTime': 'number'};
var objectSession = {'puzzleId': 'data', 'solves': [objectSolve]};
var objectHashes = {'idPrefix': 'data', 'length': 'int', 'hashes': {'[data]': 'data'}};

var apiCalls = {
    'puzzles': {
        'add': {'puzzles': [objectPuzzle]},
        'replace': {'remoteId': 'id', 'puzzle': objectPuzzle},
        'renameThenAdd': {'remoteId': 'id', 'name': 'string', 'puzzle': objectPuzzle},
        'rename': {'renames': [objectRename]},
        'deleteThenRename': {'deleteId': 'id', 'rename': objectRename},
        'setValues': {'sets': [{'id': 'id', 'attribute': 'string', 'value': 'data'}]},
        'delete': objectIdList,
        'list': {},
        'myOrder': objectIdList
    },
    'sessions': {
        'delete': objectIdList,
        'add': {'sessions': [objectSession]},
        'getHashes': {'idPrefix': 'data', 'length': 'int'},
        'getDiff': {'idPrefix': 'data', 'ids': ['id']}
    },
    'account': {
        'setValues': {'attributes': [{'attribute': 'string', 'value': 'data'}]},
        'getAccount': {},
        'signin': {}
    },
    'image': {
        'upload': {'data': 'data', 'hash': 'data'},
        'download': {'hash': 'data'},
        'missing': {}
    }
};

function lookupAPICall(name) {
    var list = name.split('.');
    if (list.length != 2) return null;
    if (!apiCalls[list[0]]) {
        return null;
    }
    if (!apiCalls[list[0]][list[1]]) {
        return null;
    }
    return apiCalls[list[0]][list[1]];
}

function validateAPICallType(name, obj) {
    var expectedObj = lookupAPICall(name);
    if (!expectedObj) return false;
    
    return validateValue(obj, expectedObj);
}

function validateValue(object, type) {
    if (typeof type == 'object') {
        // its a dictionary
        if (typeof object != 'object') {
            return false;
        }
        return validateObject(object, type);
    } else if (typeof type == 'string') {
        if (type == 'data') {
            if (typeof object != 'object') return false;
            if (object.constructor.name != 'KBBuffer') return false;
        } else if (type == 'id') {
            if (typeof object != 'object') return false;
            if (object.constructor.name != 'KBBuffer') return false;
            if (object.length != exports.idLength) return false;
        } else return (type == typeof object);
    }
}

/*** Validation For Objects ***/

function validateObject(dict, types) {
    if (validateObjectIsAttributeList(types)) {
        return validateAttributeList(dict, types);
    } else {
        // confirm each property of `types` on dict
        for (var key in types) {
            // if key begins with '@' then it is an optional parameter
            var rawKey = key;
            if (key[0] == '@') rawKey = key.substring(1);
            
            if (dict[rawKey] == undefined) {
                if (rawKey == key) return false;
                else continue;
            }
            if (!validateValue(dict[key], types[key])) return false;
        }
        // make sure they didn't send any excess keys
        for (var key in dict) {
            if (key[0] == '@') return false; // this is just funny business!
            if (types[key] == undefined && types['@' + key] == undefined) {
                return false;
            }
        }
        return true;
    }
}

function validateObjectIsAttributeList(types) {
    var keys = Object.keys(types);
    if (keys.length == 1) {
        // check if its an array type
        if (keys[0].length > 2) {
            var key = keys[0];
            if (key[0] == '[' && key[key.length - 1] == ']') {
                return true;
            }
        }
    }
    return false;
}

function validateAttributeList(dict, types) {
    var key = Object.keys(types)[0];
    var keyType = key.substring(1, key.length);
    var valType = types[key];
    for (var dictKey in dict) {
        if (!validateValue(dictKey, keyType)) return false;
        if (!validateValue(dict[dictKey], valType)) return false;
    }
}

exports.validateCall = validateAPICallType;
exports.validateValue = validateValue;
