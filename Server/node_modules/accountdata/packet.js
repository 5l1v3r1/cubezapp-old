var kb = require('keyedbits');
var validate = require('./validate.js');
var db = require('./db');

function validatePuzzleSet(data) {
    for (var i = 0; i < data['sets'].length; i++) {
        var setObj = data['sets'][i];
        var attribute = setObj['attribute'];
        if (db.puzzle.globalAttributes.indexOf(attribute) < 0) {
            if (db.puzzle.localAttributes.indexOf(attribute) < 0) {
                return false;
            }
        }
    }
    return true;
}

function validateAccountSet(data) {
    for (var i = 0; i < data['attributes'].length; i++) {
        var setObj = data['attributes'][i];
        var attribute = setObj['attribute'];
        if (db.account.attributes.indexOf(attribute) < 0) {
            return false;
        }
    }
    return true;
}

var specificValidation = {
    'puzzles.setValues': validatePuzzleSet,
    'account.setValues': validateAccountSet
};

function ClientPacket(call, remoteObj) {
    this.call = call;
    this.username = remoteObj['username'];
    this.password = remoteObj['hash'];
    this.device = remoteObj['device'];
    this.packet = {};
    for (var key in remoteObj) {
        if (key != 'username' && key != 'hash' && key != 'device') {
            this.packet[key] = remoteObj[key];
        }
    }
}

ClientPacket.prototype.validate = function() {
    if (!validate.validateCall(this.call, this.packet)) {
        return false;
    }
    if (typeof this.username != 'string') {
        return false;
    }
    if (typeof this.device != 'string') {
        return false;
    }
    if (typeof this.password != 'object') {
        return false;
    }
    if (this.password.constructor.name != 'KBBuffer') {
        return false;
    }
    if (['ios'].indexOf(this.device) < 0) return false;
    
    if (specificValidation[this.call]) {
        if (!specificValidation[this.call](this.packet)) {
            return false;
        }
    }
    
    return true;
}

ClientPacket.prototype.getAPIDomain = function() {
    return this.call.split('.')[0];
}

ClientPacket.prototype.getAPIName = function() {
    return this.call.split('.')[1];
}

function ServerPacket(object) {
    this.packet = object;
}

ServerPacket.prototype.encode = function (useBase64) {
    var buffer = new kb.buffer();
    var encoder = new kb.encode(buffer);
    encoder.encode(this.packet);
    if (useBase64) {
        return kb.base64.encode(buffer);
    } else {
        return buffer;
    }
}

exports.ClientPacket = ClientPacket;
exports.ServerPacket = ServerPacket;
