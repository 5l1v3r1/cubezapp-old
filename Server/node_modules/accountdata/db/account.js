var convert = require('./convert.js');
var dbobject = require('./dbobject.js');

exports.attributes = ['cubeScheme', 'name'];

function Account(dictionary, db) {
    dbobject.DbObject.call(this, dictionary, db);
}

Account.prototype = Object.create(dbobject.DbObject.prototype);

Account.prototype.getCollectionName = function() {
    return 'accounts';
}

/**
 * Tells callback(err, list) an array of [ObjectID] values
 * which are the unordered list of puzzles linked with
 * an account.
 */
Account.prototype.findPuzzleList = function(callback) {
    // find the list of puzzles linked to the account
    var puzzles = this.db.collection('puzzles');
    var query = {'account': this.dictionary['_id']};
    var fields = {'_id': true};
    puzzles.find(query, fields).toArray(function (err2, list) {
        if (err2) {
            callback(err2, null);
            return;
        }
        var idList = [];
        for (var i = 0; i < list.length; i++) {
            idList.push(list[i]['_id']);
        }
        callback(null, idList);
    });
}

/**
 * Tells callback(err, list) a specifically ordered array of [ObjectID]
 * values of puzzles on a certain device. If the device was not already
 * registered with the account, it will be added and a default order 
 * will be chosen. The device ID at the moment must be from this list:
 * - 'ios'
 */
Account.prototype.findOrderedPuzzles = function(device, callback) {
    var existing = this.dictionary.puzzleLists[device];
    if (existing != null && existing != undefined) {
        callback(null, existing);
        return;
    }
    
    // find the complete puzzle list and add it as a field
    var account = this;
    this.findPuzzleList(function (err1, list) {
        if (err1) {
            callback(err1, null);
            return;
        }
        this.setField('puzzleLists.' + device, list, function (err2) {
            callback(err2, err2 ? null : list);
        });
    });
}

Account.prototype.getAttribute = function(attr) {
    return this.getField('attributes.' + attr);
}

Account.prototype.setAttribute = function(attr, value, callback) {
    this.setField('attributes.' + attr, value, false, callback);
}

exports.findOne = function(username, callback) {
    dbobject.findOne({'username': username}, Account, 'accounts', callback);
}

exports.signup = function(username, hash, email, attributes, callback) {
    var attrs = {};
    for (var key in attributes) {
        attrs[key] = convert.convertData(attributes[key], 'Binary');
    }
    var account = {'username': username,
                   'hash': convert.convertData(hash, 'Binary'),
                   'email': email,
                   'attributes': attrs,
                   'puzzleLists': {}};
    dbobject.add([account], Account, 'accounts', callback);
}

exports.Account = Account;
