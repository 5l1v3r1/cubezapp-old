var conn = require('./conn.js');
var convert = require('./convert.js');
var dbobject = require('./dbobject.js');
var KBBuffer = require('keyedbits').buffer;

exports.globalAttributes = ['Name', 'IconColor', 'ImageHash', 'InspectionTime', 'Scramble',
                             'ScrambleLen', 'ShowScramble', 'ShowStats', 'Type'];
exports.localAttributes = ['Hidden'];
exports.defaultLocal = {'Hidden': new KBBuffer(new Uint8Array([0]))};

function Puzzle(dictionary, db) {
    dbobject.DbObject.call(this, dictionary, db);
}

Puzzle.prototype = dbobject.DbObject.prototype;

Puzzle.prototype.getCollectionName = function() {
    return 'puzzles';
}

Puzzle.prototype.getAttribute = function(devId, attribute) {
    if (exports.globalAttributes.indexOf(attribute) >= 0) {
        // its a general attribute
        return this.getField('globalAttributes.' + attribute);
    } else if (exports.localAttributes.indexOf(attribute) >= 0) {
        // read the local attribute and return a default value if it does
        // not exist
        var attrName = devId + '_' + attribute;
        var value = this.getField('localAttributes.' + attrName);
        if (value) return value;
        else return exports.defaultLocal[attribute];
    } else {
        throw Error('Invalid attribute specified');
    }
}

Puzzle.prototype.setAttribute = function(devId, attribute, value, callback) {        
    var addKey = null;        
    if (exports.globalAttributes.indexOf(attribute) >= 0) {
        addKey = 'globalAttributes.' + attribute;
    } else if (exports.localAttributes.indexOf(attribute) >= 0) {
        addKey = 'localAttributes.' + devId + '_' + attribute;
    } else {
        callback(new Error('Invalid attribute'));
        return;
    }
    this.setField(addKey, value, callback);
}

exports.Puzzle = Puzzle;

exports.find = function(accountId, puzzleIds, callback) {
    var inQuery = dbobject.binaryInQuery(puzzleIds);
    var query = {'id': inQuery,
                 'account': accountId};
    dbobject.find(query, Puzzle, 'puzzles', callback);
}

exports.findOne = function(accountId, puzzleId, callback) {
    var query = {'id': convert.convertData(puzzleId, 'Binary'),
                 'account': accountId};
    dbobject.findOne(query, Puzzle, 'puzzles', callback);
}

function encodePuzzle(devId, accountId, puzzleInfo) {
    var localAttrs = {};
    var globalAttrs = {};
    for (var key in puzzleInfo['attributes']) {
        var value = convert.convertData(puzzleInfo['attributes'][key], 'Binary');
        if (value == null || value == undefined) {
            return null;
        }
        if (exports.localAttributes.indexOf(key) >= 0) {
            localAttrs[devId + '_' + key] = value;
        } else if (exports.globalAttributes.indexOf(key) >= 0) {
            globalAttrs[key] = value;
        } else {
            callback(new Error('Invalid attribute found'), null);
            return null;
        }
    }
    return {'id': convert.convertData(puzzleInfo['id'], 'Binary'),
            'account': accountId,
            'localAttributes': localAttrs,
            'globalAttributes': globalAttrs};
}

/**
 * Adds a list of APIPuzzle objects.
 */
exports.add = function(accountId, puzzleInfos, devId, callback) {
    var failed = false;
    var puzzleObjects = puzzleInfos.map(function (x) {
        var obj = encodePuzzle(devId, accountId, x);
        if (!obj) failed = true;
        return obj;
    });
    if (failed) {
        callback(new Error('Invalid arguments given'));
        return;
    }
    dbobject.add(puzzleObjects, Puzzle, 'puzzles', callback);
}

/**
 * Removes all puzzles belonging to an account. This also removes
 * all sessions associated with the deleted puzzles.
 */
exports.deleteAll = function(accountId, puzzleIds, callback) {
    var inQuery = dbobject.binaryInQuery(puzzleIds);
    conn.withDb(function (err, db) {
        if (err) return callback(err);
        var puzzles = db.collection('puzzles');
        puzzles.remove({'account': accountId, 'id': inQuery}, function (err1) {
            if (err1) return callback(err1);
            var sessions = db.collection('sessions');
            sessions.remove({'account': accountId, 'puzzleId': inQuery}, function (err2) {
                callback(err2);
            });
        });
    });
}
