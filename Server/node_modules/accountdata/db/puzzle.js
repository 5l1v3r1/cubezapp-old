var conn = require('./conn.js');
var convert = require('./convert.js');

exports.globalAttributes = ['Name', 'IconColor', 'ImageHash', 'InspectionTime', 'Scramble',
                             'ScrambleLen', 'ShowScramble', 'ShowStats', 'Type'];
exports.localAttributes = ['Hidden'];
exports.defaultLocal = {'Hidden': new KBBuffer(new Uint8Array([1]))};

function Puzzle(dictionary) {
    this.dictionary = dictionary;
}

Puzzle.prototype.getAttribute = function(devId, attribute) {
    if (exports.globalAttributes.indexOf(attribute) >= 0) {
        // its a general attribute
        return convert.convertData(this.globalAttributes[attribute], 'KBBuffer');
    } else if (exports.localAttributes.indexOf(attribute) >= 0) {
        // read the local attribute and return a default value if it does
        // not exist
        var attrName = devId + '_' + attribute;
        var value = this.localAttributes[attrName];
        if (value == null || value == undefined) {
            return exports.defaultLocal[attribute];
        }
        return convert.convertData(value, 'KBBuffer');
    } else {
        return null;
    }
}

Puzzle.prototype.setAttribute = function(devId, attribute, value, callback) {
    var puzzle = this;
    conn.withDb(function (err1, db) {
        if (err1) {
            callback(err1);
            return;
        }
        
        var puzzles = db.collection('puzzles');
        var query = {'_id': puzzle.dictionary['_id']};
        var addKey = null;
        
        if (exports.globalAttributes.indexOf(attribute) >= 0) {
            addKey = 'globalAttributes.' + attribute;
        } else if (exports.localAttributes.indexOf(attribute) >= 0) {
            addKey = 'localAttributes.' + devId + '_' + attribute;
        } else {
            callback(new Error('Invalid attribute'));
            return;
        }
        
        var set = {'$set': {addKey: convert.convertData(value, 'Binary')}};
        puzzles.update(query, set, {'safe': true}, function (err2) {
            if (err2) {
                callback(err2);
                return;
            }
            if (exports.globalAttributes.indexOf(attribute) >= 0) {
                this.globalAttributes[attribute] = value;
            } else if (exports.localAttributes.indexOf(attribute) >= 0) {
                this.localAttributes[devId + '_' + attribute] = value;
            }
            callback(null);
        });
    });
}

puzzle.prototype.delete = function(callback) {
    // TODO: delete the puzzle itself and then delete all sessions for
    // the puzzle
}

exports.Puzzle = Puzzle;

exports.find = function(accountId, puzzleId, callback) {
    var query = {'id': convert.convertData(puzzleId, 'Binary'),
                 'account': accountId};
    conn.withDb(function (err1, db) {
        if (err1) {
            callback(err1, null);
            return;
        }
        var puzzles = db.collection('puzzles');
        puzzles.findOne(query, function (err, doc) {
            if (err) {
                callback(err, null);
                return;
            }
            if (!doc) {
                callback(new Error('Puzzle not found'), null);
            } else {
                callback(null, new Puzzle(doc));
            }
        });
    });
}

exports.add = function(accountId, puzzleInfo, devId, callback) {
    var localAttrs = {};
    var globalAttrs = {};
    for (var key in puzzleInfo['attributes']) {
        var value = convert.convertData(puzzleInfo['attributes'][key], 'Binary');
        if (value == null || value == undefined) {
            callback(new Error('Invalid attribute type'), null);
            return;
        }
        if (exports.localAttributes.indexOf(key) >= 0) {
            localAttrs[devId + '_' + key] = value;
        } else if (exports.globalAttributes.indexOf(key) >= 0) {
            globalAttrs[key] = value;
        } else {
            callback(new Error('Invalid attribute found'), null);
            return;
        }
    }
    var puzzleObject = {'id': convert.convertData(puzzleInfo['id'], 'Binary'),
                        'account': accountId,
                        'localAttributes': localAttrs,
                        'globalAttributes': globalAttrs};
    conn.withDb(function (err, db) {
        if (err) {
            callback(err, null);
            return;
        }
        var puzzles = db.collection('puzzles');
        puzzles.insert(puzzleObject, {'safe': true}, function (err1, doc) {
            if (err1) {
                callback(err1, null);
            } else {
                callback(null, new Puzzle(doc));
            }
        });
    });
}
